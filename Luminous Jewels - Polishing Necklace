Problem : Luminous Jewels - Polishing Necklace
Byteland county is very famous for luminous jewels. Luminous jewels are used in making beautiful necklaces. A necklace
consists of various luminous jewels of particular colour. Necklaces require polishing the jewels.
Operationally, all jewels of the same colour can be polished in one sitting. Cost of polishing increases with every sitting.
Your task is to minimize the cost of polishing the necklace, given following conditions
1. Jewels can only be removed for polishing from either end of the necklace (i.e. head or tail)
2. Cost of polishing = Sitting Number * Colour Value of the Luminous Jewel
3. The necklace is represented as a String and each character of the string is a Luminous Jewel
4. Similar character is the same Luminous Jewel which has same Colour Value
Colour Value for different Jewels named from a to z are 1 to 26 respectively. For e.g. a = 1, b = 2, ... z = 26.
Input Format:
First line starts with T, number of test cases. Each test case T contains a necklace (N).
Output Format:
Print the minimum cost of polishing the necklace.
Constraints:
1<=T<=100
1<=|N|<=500, N will only contain lower case alphabets ('a'-'z').

Sample Input and Output
aba
5
abaacde
36

PYTHON CODE:

text=input("Enter the string:")
seat=1
cost=0
tcost=0
while (text !=''):
if(text[0] <= text[len(text)-1]):
# print(len(text))
# print(text[len(text)-1])
asc=(text[len(text)-1])
asv=ord(asc)-96
text=text.replace(text[len(text)-1],'')
else :
# print(len(text))
# print(text[0])
asc=(text[0])
asv=ord(asc)-96
text=text.replace(text[0],'')
cost=seat*asv
#print(cost)
tcost=tcost+cost;
seat=seat+1;
print(tcost)
